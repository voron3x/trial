# coding: utf-8
"""
Данный модуль описывает функциоанлльные блоки приложения.

Например:
1) Cравнение двух юзеров, не является операцией CRUD над моделью данных.
2) Точки вызова одного и тоже функционала могут быть в разных места, к примеру
вызов через api, через view, через manage команду или обработчик сигнала celery.
чтобы избежать дублирования кода вынесено сюду.
3) Проще тестировать.
"""
from netaddr import IPNetwork

from trial.models import IpTable, SUBNET_MASK

# Число совпадений для идентичности двух пользователей.
COMPARE_COUNT = 2


def compare_users(user1, user2):
    """ Функция производит аналитику по пересечению пользователей с
    одинаковыми ip.

    Условие:
    Для определения того что пользователи взаимосвязаны должно соблюдаться
    условие: у них есть два и более одинаковых Ip_address из различных сетей
    /24, например:

    а) 1.2.3.4 и 1.2.4.5 это разные подсети и если у обоих пользователей есть
        оба эти адреса то пользователи взаимосвязаны
    б) 1.2.3.4 и 1.2.3.5 это одна подсеть и пользователей нельзя считать
        взаимосвязанными.

    Алгоритм:
    Работаем через структуру данных хеш и ее своисто иметь только один
    уникальный ключ.

    1) Получаем все ip двух пользователей из БД
    2) Добавлем элемент в хеш где ключ это ip а значение адрес.
    3) Если ключ уже есть и у этого ключа другой юзер, значит
        имеем совпадение адресов у обоих пользователей.
    4) Вычеслим подсеть для совпавшего адреса и запишем в другой хеш, где
        ключ это адрес подсети, а значнеие просто ноль.
    5) Если ключей больше или равно двум, значит пользователи совпадают.

    :param user1: int ID usera в модели
    :param user2: int ID usera в модели
    :return: bool взаимосвязаны или нет.
    """
    users = IpTable.objects.filter(user_id__in=(user1, user2))
    users_ip = users.values_list('ip_address', 'user_id')

    # Аккумулятор подсетей совпавших адресов
    compare_subnet = {}

    # Ищем одинаковые ip адреса у обоих пользователей.
    compare = {}
    for ip_adress, user_id in users_ip:
        # Есть совпадение по ip
        if ip_adress in compare and compare[ip_adress] != user_id:

            # Подсеть по нашей маске для совпавшего ip
            ip_network = IPNetwork('{}/{}'.format(ip_adress, SUBNET_MASK))

            # Вычеcляем Ip подсети для идентификации.
            ip_network_str = str(ip_network.network)

            compare_subnet[ip_network_str] = 0

            # Два и более одинаковых Ip_address из различных сетей
            if len(compare_subnet.keys()) >= COMPARE_COUNT:
                return True

        compare[ip_adress] = user_id

    return False